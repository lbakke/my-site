{"version":3,"sources":["logo.svg","images/startinglogo.png","images/aboutword.png","images/contactword.png","components/introduction.jsx","components/about.jsx","components/contact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Introduction","className","data-section","src","require","activeClass","to","spy","smooth","duration","Component","About","name","Contact","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,kICItBC,E,uKAEjB,OACD,yBAAKC,UAAU,eAAeC,eAAa,QAC5C,yBAAKD,UAAU,kBAAf,iCACA,yBAAKA,UAAU,aACd,yBAAKE,IAAKC,EAAQ,OAEnB,6BACA,kBAAC,OAAD,CAAMC,YAAY,SAASJ,UAAU,eAAeK,GAAG,QAAQC,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KAAlG,SACA,kBAAC,OAAD,CAAMR,UAAU,eAAeI,YAAY,SAASC,GAAG,UAAUC,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KAApG,WACA,0BAAMR,UAAU,gBAAhB,iB,GAXwCS,aCDrBC,E,uKAEjB,OACE,6BACA,yBAAKC,KAAK,QAAQX,UAAU,SAC1B,yBAAKA,UAAU,eACX,yBAAKE,IAAKC,EAAQ,QAGxB,yBAAKH,UAAU,eAAf,6C,GAT6BS,aCAdG,E,uKAEjB,OACE,6BACE,yBAAKZ,UAAU,iBAAf,wCAGA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKE,IAAKC,EAAQ,a,GATOM,aCqBtBI,MAhBf,WACE,OACD,6BACI,6BACF,kBAAC,EAAD,CAAcC,GAAG,WAElB,6BACC,kBAAC,EAAD,CAAOA,GAAG,WAEX,6BACC,kBAAC,EAAD,CAASA,GAAG,eCNKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9e405592.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/startinglogo.95841fb1.png\";","module.exports = __webpack_public_path__ + \"static/media/aboutword.df9e2529.png\";","module.exports = __webpack_public_path__ + \"static/media/contactword.2b9b1378.png\";","import React, { Component } from 'react'\nimport '../App.css';\nimport { Link, animateScroll as scroll } from \"react-scroll\"; \n\nexport default class Introduction extends Component {\n  render() {\n    return (\n\t  <div className=\"introduction\" data-section=\"home\">\n\t\t<div className=\"student-header\">student and software engineer</div>\n\t\t<div className=\"intro-img\">\n\t\t\t<img src={require('../images/startinglogo.png')}/>\n\t\t</div>\n\t\t<div>\n\t\t<Link activeClass=\"active\" className=\"about-button\" to=\"about\" spy={true} smooth={true} duration={500}>about</Link>\n\t\t<Link className=\"about-button\" activeClass=\"active\" to=\"contact\" spy={true} smooth={true} duration={500}>contact</Link>\n\t\t<span className=\"about-button\">contact</span></div>\n      </div>\n    )\n  }\n}\n\n\n","import React, { Component } from 'react'\nimport '../App.css'; \n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n      <div name=\"about\" className=\"about\">\n        <div className=\"section-img\">\n            <img src={require('../images/aboutword.png')}/>\n        </div>\n      </div>\n      <div className=\"right-about\">\n          this is where the content will go !!\n      </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport '../App.css'; \n\nexport default class Contact extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"right-contact\">\n            this is where contact info will go!!\n        </div>         \n        <div className=\"contact\">\n          <div className=\"section-img\">\n            <img src={require('../images/contactword.png')}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Introduction from './components/introduction';\nimport About from './components/about';\nimport Contact from './components/contact';\nimport { Link, animateScroll as scroll } from \"react-scroll\"; \n\nfunction App() {\n  return (\n\t<div>\n    \t<div>\n\t\t\t<Introduction id=\"intro\"></Introduction>\n\t\t</div>\n\t\t<div>\n\t\t\t<About id=\"about\"></About>\n\t\t</div>\n\t\t<div>\n\t\t\t<Contact id=\"contact\"></Contact>\n\t\t</div>\n\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}